title Ablauf mit eHealth-CardLink gemäß gemSpec_eHealth-CardLink (v1.0.0)

actor Nutzer
participant eGK
participant App
participant VZD
participant "eHealth-CardLink" as CL
participant "Konnektor" as Kon
participant "Primärsystem" as PS
participant "FD_VSDM" as FD_VSDM
participant "FD_x" as FD_x

entryspacing 0.7

Kon <-> CL: 0.a Pairing zwischen Konnektor und eHealth-CardlLink
Nutzer -> App: 0.b Installation und Konfiguration der App
App <-> App: 0.b.1 Zugriff auf Telefonstatus erlauben (optional)
ref over Nutzer, App: 0.b.2: Mobilfunknummer (MSN) ermitteln oder erfassen
App <-> VZD: 0.b.3 LEI konfigurieren (optional)
App -> CL: 0.b.4 Websocket-Verbindung aufbauen
App <<#red:4-- CL: 0.b.5 Gib <color:#red>**sessionInformation**</color> mit webSocketId zurück
App -#red:4> CL:  0.b.5 TAN anfordern (<color:#red>**requestSMSCode**</color>)
CL <-> CL: 0.b.6 TAN-Erzeugung, Speicherung MSN und TAN
App <<#red:4-- CL: 0.b.7 <color:#red>**requestSMSCodeResponse</color>
CL -> Nutzer: 0.b.8 TAN per SMS senden
Nutzer -> App: 0.b.9 TAN erfassen
App -#red:4> CL:  0.b.10 TAN übermitteln (<color:#red>**confirmSMSCode**</color>)
CL -> CL: 0.b.11 TAN validieren
App <<#red:4-- CL: 0.b.12 TAN-Validierung bestätigen (<color:#red>**confirmSMSCodeResponse</color>)
Nutzer -> App: 1. eGK und CAN  bereitstellen
App <-> eGK: 1.1 PACE mit CAN
App <-> eGK: 1.2 eGK-Daten auslesen
App -> CL: 2. eGK-Daten übermitteln (registerEGK)
CL -> CL: 2.1 Verknüpfung ICCSN der eGK mit MSN prüfen
App <<#red:4-- CL: 2.2  <color:#red>**ICCSNReassignment**</color> melden, sofern nötig
CL -> Nutzer: 2.3 Nutzer mit vorheriger MSN per SMS über neue Verknüpfung informieren, sofern nötig
CL -> CL: 2.4 Protokollierung
CL -> Kon: 2.5 Signalisiere CARD/INSERTED
Kon -> PS: 2.6 Signalisiere CARD/INSERTED
PS -> Kon: 2.7 GetCards(cardType=eGK)
Kon -> CL: 2.8 SICCT-cmdAPDUs für GetCards
CL --> Kon: 2.9 SICCT-resAPDUs für GetCards
Kon --> PS: 2.10 GetCardsResponse inkl. ICCSN zurückliefern
PS -> Kon: 3. ReadVSD am Konnektor aufrufen
Kon <-> CL: 3.1 SICCT-APDUs **vor** INTERNAL AUTHENTICATE
Kon -> CL: 3.2 SICCT-APDU **für** INTERNAL_AUTHENTICATE
CL -> App: 3.3 sendAPDU(INTERNAL_AUTHENTICATE)
App -> eGK: 3.4 INTERNAL_AUTHENTICATE
eGK -> eGK: 3.5 Erzeuge Signatur für Challenge
eGK --> App: 3.6 signature || 90 00
App --> CL: 3.7 sendAPDUResponse(signature)
CL --> Kon: 3.8 SICCT-Response-APDU(signature)
Kon <-> Kon: 3.9 Signaturvalidierung
Kon -> FD_VSDM: 4. Online-Gültigkeitsprüfung
FD_VSDM --> Kon: 5. Bereitstellung der Prüfziffer
Kon -> Kon: 6. Erstellung Prüfungsnachweis aus Prüfziffer
Kon --> PS: 7. ReadVSDResponse mit Prüfungsnachweis 
PS -> CL: 7.1 Etabliere Websocket-Verbindung (ICCSN)
CL -#red:4> PS:  7.2 gib <color:#red>**sessionInformation**</color> mit webSocketId zurück
CL -> App: 7.3 <color:#red>**RegisterEGKFinish**</color>  


FD_x <-> Nutzer: Anwendungsfallspezifische Abläufe




